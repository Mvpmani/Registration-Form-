<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cetas Walk-in Interview Registration</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css">
    <link href="https://fonts.googleapis.com/css?family=Exo:400,700" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"></script>
    
</head>

<body>

    
    <div class="container" id="form-container">
        <h2 class="mb-4">Cetas Walk-in Interview Registration</h2>
        <form id="registrationForm">

            <div class="form-group mb-3">
                <div>
                    <label for="fullname" class="form-label">Candidate Full Name</label>
                </div>

                <input type="text" class="form-control" name="fullname" id="fullname" required>
            </div>
            <div id="fullname-error" class="text-danger"></div>
            <div class="form-group mb-3">
                <div>
                    <label for="email" class="form-label">Candidate Email</label>
                </div>

                <input type="email" class="form-control" name="email" id="email" required  onchange="validateEmail(this)">
                <div id="email-error" class="text-danger"></div>
            </div>
            <div class="form-group mb-3">
                <div>
                    <label for="Contact No" class="form-label">Contact No</label>
                </div>

                <input type="text" class="form-control" name="phone" id="phone" required>
            </div>
            <div class="form-group mb-3">
                <div>
                    <label for="Date of Birth" class="form-label">Date of Birth</label>
                </div>

                <input type="date" class="form-control" name="dob" id="dob" required>
            </div>
            <div class="form-group mb-3">
                <div>
                    <label for="Gender" class="form-label">Gender</label>
                </div>

                <select class="form-control" name="Gender" id="Gender" required>
                    <option value="" disabled selected>Select</option>
                    <option value="Male">Male</option>
                    <option value="Female">Female</option>
                </select>
            </div>
            <div class="form-group mb-3">
                <div>
                    <label for="MaritalStatus" class="form-label">Marital Status</label>
                </div>

                <select class="form-control" name="MaritalStatus" id="MaritalStatus" required>
                    <option value="" disabled selected>Select</option>
                    <option value="Single">Single</option>
                    <option value="Married">Married</option>
                </select>
            </div>
            <div class="form-group mb-3">
                <div>
                    <label for="College Name" class="form-label">College Name</label>
                </div>

                <input type="text" class="form-control" name="college" id="college" required>
            </div>
            <div class="form-group mb-3">
                <div>
                    <label for="Education Qualification" class="form-label">Education Qualification</label>
                </div>

                <select class="form-control" name="education" id="education" required>
                    <option value="" disabled selected>Select</option>
                    <option value="B.E Computer Science and Engineering">B.E Computer Science and Engineering</option>
                    <option value="M.Sc Computer Science">M.Sc Computer Science</option>
                    <option value="MCA">MCA</option>
                    <option value="B.Tech Information Technology">B.Tech Information Technology</option>
                    <option value="Other">Other</option>
                </select>
            </div>
            <div class="form-group mb-3" id="specialization-container" style="display: none;">
                <div>
                    <label for="Specialization" class="form-label">If other, mention your qualification</label>
                </div>
                <input type="text" class="form-control" name="Specialization" id="Specialization">
            </div>

            <div class="form-group mb-3">
                <div>
                    <label for="Year of Passing" class="form-label">Year of Passing</label>
                </div>

                <select class="form-control" name="YOP" id="YOP" required>
                    <option value="" disabled selected>Select</option>
                    <option value="2025">2025</option>
                    <option value="2024">2024</option>
                    <option value="2023">2023</option>

                </select>
            </div>







            


            <div class="form-group mb-3 ">
                <div>
                    <label for="Expertise Functional or Technical" class="form-label">Expertise Functional or
                        Technical</label>
                </div><select class="form-control" name="FunctionalOrTechnical" id="FunctionalOrTechnical" required>
                    <option value="" disabled selected>Select</option>
                    <option value="Functional">Functional</option>
                    <option value="Technical">Technical</option>
                    <option value="Techno-Functional">Techno-Functional</option>
                </select>
            </div>




            <div class="form-group mb-3">
                <div>
                    <label for="How did you know us?" class="form-label">How did you know us?</label>
                </div> <select class="form-control" name="KnownCetas" id="KnownCetas" required>
                    <option value="" disabled selected>Select</option>
                    <option value="Cetas Website">Cetas Website</option>
                    <option value="LinkedIn">LinkedIn </option>
                    <option value="Friends">Friends</option>
                    <option value="Employee of Cetas">Refer by Cetas Employee</option>
                    <option value="Consultancy or Institute">Consultancy/Institute</option>
                    <option value="Walk-in">Walk-In</option>
                </select>
            </div>
            <div class="form-group mb-3">
                <div>
                    <label for="Enter your SSLC Certification Number" class="form-label">Enter your SSLC
                        certification number</label>
                </div> <input type="text" class="form-control" name="CertificateNo" id="CertificateNo" required onchange="validateCertificate(this)">
                <div id="certificate-error" class="text-danger"></div>
            </div>
            <div class="form-group mb-3">
                <div>
                    <label for="Approximate date to join in cetas " class="form-label">Approximate date to join in cetas</label>
                </div>
                <input type="date" class="form-control" name="ApproxDate" id="ApproxDate" required>
            </div>
            <div class="form-group mb-3">
                <div>
                    <label for="Upload your resume here" class="form-label">Upload your resume here</label>
                </div>

                <input type="file" class="form-control" name="resume" id="resume" accept=".pdf,.doc,.docx" required>
            </div> <button type="submit" class="btn btn-success w-100" name="submitBtn" id="submitBtn">Submit</button>
        </form>
        <div id="alert-container" class="mt-3"></div>
    </div>
    <script>
        const sendFormDataApi = 'https://prod-12.centralindia.logic.azure.com:443/workflows/bc2a849b68a04584bda8fe6ec3f57689/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=2GJanjyDWT9qoxVRxe4YdGPPGdLizr70vin52AHt9zI'
        const validateApi = 'https://prod-15.centralindia.logic.azure.com:443/workflows/e830e8948f0045e1bbb71a4b0ce0e446/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=VkahY2elK2rpN2ZKjeaX-YigT8hijWfJH5zU_tIB8YM'
        async function validateEmail(input) {
    const email = input.value.trim();
    const emailError = document.getElementById("email-error");

    // Clear any previous error message
    emailError.innerText = "";

    // Validate email format
    if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
        emailError.innerText = "Please enter a valid email address.";
        input.classList.add("is-invalid");
        input.classList.remove("is-valid");
        return;
    }

   
    // Check if the email already exists
    const emailExists = await validateEmailAndCertificate(email, null);
    if (emailExists) {
        emailError.innerText = "This email has already been registered.";
        input.classList.add("is-invalid");
        input.classList.remove("is-valid");
    } else {
        emailError.innerText = ""; // Clear the error if valid
        input.classList.remove("is-invalid");
        input.classList.add("is-valid");
    }
}
async function validateCertificate(input) {
    const certificateNo = input.value.trim();
    const certificateError = document.getElementById("certificate-error");

    // Clear any previous error message
    certificateError.innerText = "";

    // Validate certificate number format
    if (!/^[A-Za-z0-9]{1,11}$/.test(certificateNo)) {
        certificateError.innerText = "Certificate number must be up to 11 characters long and contain only numbers and optional alphabets.";
        input.classList.add("is-invalid");
        return;
    }

    // Check if the certificate number already exists
    const certificateExists = await validateEmailAndCertificate(null, certificateNo);
    if (certificateExists) {
        certificateError.innerText = "This certificate number has already been registered.";
        input.classList.add("is-invalid");
    } else {
        certificateError.innerText = ""; // Clear the error if valid
        input.classList.remove("is-invalid");
        input.classList.add("is-valid");
    }
}

        document.addEventListener("DOMContentLoaded", () => {
            initForm();
            // Get the current date
            const today = new Date();

            // Calculate the date 18 years ago
            const eighteenYearsAgo = new Date(today.setFullYear(today.getFullYear() - 18));

            // Format the date as YYYY-MM-DD
            const maxDate = eighteenYearsAgo.toISOString().split("T")[0];

            // Set the max attribute of the dob field
            const dobField = document.getElementById("dob");
            dobField.setAttribute("max", maxDate);
        

            // Add event listener for the education field to toggle specialization
            const educationField = document.getElementById("education");
            const specializationContainer = document.getElementById("specialization-container");

            // Add event listener to the education dropdown
            educationField.addEventListener("change", () => {
                if (educationField.value === "Other") {
                    specializationContainer.style.display = "block"; // Show the specialization field
                } else {
                    specializationContainer.style.display = "none"; // Hide the specialization field
                }
            });
        });

        // 🔹 Initialization Function
        function initForm() {
            const form = document.getElementById("registrationForm");

            animateForm();
            form.addEventListener("submit", handleFormSubmit);
        }

        // 🔹 Experience Field Toggle for Freshers




        // Fields to toggle





        // Toggle "Reason for Not Joining Immediately"field

        // 🔹 Animate the form on load
        function animateForm() {
            gsap.from("#form-container", {
                duration: 1,
                opacity: 0,
                y: -50,
                ease: "power2.out"
            });
        }

        async function handleFormSubmit(event) {
            event.preventDefault();
            console.log("Form submission started");

            const form = event.target;
            const phone = form.phone.value.trim();
            const dob = form.dob.value;
            const resumeFile = form.resume.files[0];
            const formData = collectFormData(form);
            
            const UniqueID=formData.UniqueID;

            const certificateNo = form.CertificateNo.value.trim();
            const email = form.email.value.trim();
            const fullname = form.fullname.value.trim();
            const approxDate = form.ApproxDate.value;

            const errorMessages = [];

            // 🔹 Fullname: 2-50 characters, letters and spaces only
            if (!/^[A-Za-z\s]{2,50}$/.test(fullname)) {
                document.getElementById("fullname-error").innerText = "Full name must be 2 to 50 characters long and contain only letters and spaces.";
                errorMessages.push("Full name is invalid.");
            }
            else {
                document.getElementById("fullname-error").innerText = ""; // Clear the error if valid
            }

          

            // 🔹 Phone Number Validation
            if (!/^[6-9]\d{9}$/.test(phone)) {
                errorMessages.push("Invalid Phone Number");
            }



            // 🔹 Age Validation
            if (!isAtLeast18YearsOld(dob)) {
                errorMessages.push("Please enter a valid date of birth. You must be at least 18 years old.");
            }
            if (approxDate) {
                const today = new Date();
                const selectedDate = new Date(approxDate);

                // Set the time of today to midnight for accurate comparison
                today.setHours(0, 0, 0, 0);

                if (selectedDate < today) {
                    errorMessages.push("Approximate Date to Join must be on  future date.");
                }
            } else {
                errorMessages.push("Please select an Approximate Date to Join.");
            }


            // 🔹 Resume File Validation
            // 🔹 Resume File Validation
            if (resumeFile) {
                const allowedExtensions = /\.(pdf|doc|docx)$/i;
                if (!allowedExtensions.test(resumeFile.name)) {
                    errorMessages.push("Resume must be a PDF, DOC, or DOCX file.");
                }
                if (resumeFile.size > 2 * 1024 * 1024) {
                    errorMessages.push("Resume file must be under 2MB.");
                }
            }

        


            // Show errors if any
            if (errorMessages.length) {
                showAlert(errorMessages.join(""), "danger");
                return;
            }
 // 🔄 Check for duplicates
 const emailExists = await validateEmailAndCertificate(email, null);
    if (emailExists) {
        document.getElementById("email-error").innerText = "This email has already been registered.";
        document.getElementById("email").classList.add("is-invalid");
        return;
    }

    const certificateExists = await validateEmailAndCertificate(null, certificateNo);
    if (certificateExists) {
        document.getElementById("certificate-error").innerText = "This certificate number has already been registered.";
        document.getElementById("CertificateNo").classList.add("is-invalid");
        return;
    }

        

            // Convert resume to base64
            if (resumeFile) {
                try {
                    formData.resume = await toBase64(resumeFile);
                    formData.filename = resumeFile.name;
                } catch (error) {
                    console.error("File conversion error:", error);
                    return showAlert("Failed to process resume file.", "danger");
                }
            }

            console.log("Form data:", formData);
            console.log("Sending data to API...");
            // 🚀 Submit form
            await sendFormData(formData, form);
        }

        // 🔹 Helper: Age Validation
        function isAtLeast18YearsOld(dobStr) {
            if (!dobStr) {
                return false; // Return false if the dob field is empty
            }

            const dob = new Date(dobStr);
            if (isNaN(dob.getTime())) {
                return false; // Return false if the dob is an invalid date
            }

            const today = new Date();
            const minDate = new Date(today.setFullYear(today.getFullYear() - 18));
            return dob <= minDate; // Check if the dob is at least 18 years ago
        }
                // Generate a GUID 
                function generateGUID() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            const r = (Math.random() * 16) | 0;
            const v = c === 'x' ? r : (r & 0x3) | 0x8;
            return v.toString(16);
        });
    }

       

        // 🔹 Helper: Collect Form Data
        function collectFormData(form) {
            const currentDate = new Date().toISOString().split("T")[0]; 
            return {
                fullname: form.fullname.value.trim(),
                email: form.email.value.trim(),
                phone: form.phone.value.trim(),
                dob: form.dob.value, // Ensure null if empty
                college: form.college.value.trim(),
                education: form.education.value,
                Specialization: form.Specialization.value.trim(),
                resume: null,
                filename: "",

                FunctionalOrTechnical: form.FunctionalOrTechnical.value,

                KnownCetas: form.KnownCetas.value,
                CertificateNo: form.CertificateNo.value.trim(),
                Gender: form.Gender.value,
                MaritalStatus: form.MaritalStatus.value,
                YOP: form.YOP.value,
                ApproxDate: form.ApproxDate.value,
                UniqueID:generateGUID(),
                SubmissionDate:currentDate  
            };
        }
        // 🔹 Helper: Show Alert
        function showAlert(message, type) {
            let alertBox = document.getElementById("alert-box");
            let formcontainer = document.getElementById("submitBtn");
            if (!alertBox) {
                alertBox = document.createElement("div");
                alertBox.id = "alert-box";
                alertBox.style.marginTop = "15px";
                document.getElementById("submitBtn").parentNode.insertBefore(alertBox, submitBtn);
            }

            alertBox.innerHTML = `
        <div class="alert alert-${type} alert-dismissible fade show"role="alert">
            ${message}
            <button type="button"class="btn-close"data-bs-dismiss="alert"aria-label="Close"></button>
        </div>
    `;
            gsap.from(".alert", { duration: 0.5, opacity: 0, y: -10 });

            // Clear the alert after 5 seconds
            setTimeout(() => {
                const alertElement = document.querySelector(".alert");
                if (alertElement) {
                    gsap.to(alertElement, {
                        duration: 0.3,
                        opacity: 0,
                        y: -10,
                        onComplete: () => {
                            alertBox.innerHTML = ""; // Clear the content
                        }
                    });
                }
            }, 5000); // Increased timeout duration to 5 seconds
        }

        // 🔹 Helper: Convert file to base64
        function toBase64(file) {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.onload = () => resolve(reader.result.split(",")[1]);
                reader.onerror = reject;
                reader.readAsDataURL(file);
            });
        }

        // 🔹 API Calls
        async function validateEmailAndCertificate(email, certificateNo) {
        try {
            const payload = {};
            if (email) payload.email = email;
            if (certificateNo) payload.certificateNo = certificateNo;

            const response = await fetch(validateApi, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });

            if (response.ok) {
                const data = await response.json();
                return data.recordExists || false;
            } else {
                const errorText = await response.text();
                console.error("Validation API failed:", errorText);
                showAlert("Failed to validate. Please try again later.", "danger");
                return false;
            }
        } catch (error) {
            console.error("Network error during validation:", error);
            showAlert("Network error while validating. Please try again later.", "danger");
            return false;
        }
    }

        async function sendFormData(data, form) {
            try {
                console.log("Form Data Sent to API:", data);
                const response = await fetch(sendFormDataApi, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data)
                });
                console.log("API Response:", response);
                if (response.ok) {
                    document.getElementsByTagName('body')[0].innerHTML = '<header><div class="header-container"><img src="https://cetastech.com/wp-content/uploads/2023/09/Cetas-Logo-Color.png" alt="Cetas Logo" class="header-logo"></div></header><div class="container"><h1>Thank You!</h1><p>Your submission has been received.</p></div>';
                    form.reset();
                    
                } else {
                    const errorText = await response.text();
                    console.error("Form submission failed:", errorText);
                    showAlert(`Failed to submit the form: ${errorText}`, "danger");
                }
            } catch (error) {
                console.error("Network error during form submission:", error);
                showAlert("Network error while submitting the form. Please try again later.", "danger");
            }
        }
    </script>
</body>

</html>
