<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cetas Walk-in Interview Registration</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css">
    <link href="https://fonts.googleapis.com/css?family=Exo:400,700" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"></script>
    
    <style>
        body {
        background-color: #f8f9fa;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        #form-container {
        max-width: 600px;
        margin: 40px auto;
        padding: 30px;
        background-color: #fff;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.05);
        border-radius: 10px;
        }
        
        h2 {
        font-weight: 600;
        text-align: center;
        color: #343a40;
        margin-bottom: 30px;
        }
        
        .form-label {
        font-weight: 500;
        color: #495057;
        }
        
        .form-control {
        border-radius: 6px;
        padding: 10px 12px;
        font-size: 15px;
        }
        
        .form-group {
        margin-bottom: 20px;

        }
        .form-group label {
        display: block;
        margin-bottom: 0.5rem;
        }
        
        .text-danger {
        font-size: 0.9em;
        margin-top: 5px;
        }
        
        #registrationForm select:invalid {
        color: #6c757d;
        }
        
        #registrationForm option[value=""][disabled] {
        display: none;
        }
        
        @media (max-width: 576px) {
        #form-container {
        padding: 20px;
        }
        }
        #submitBtn {
        background-color: #00008B; /* Custom orange color */
        border-color: #00008B; /* Match border color */
        color: white; /* Text color */
        }

        #submitBtn:hover {
        background-color:#5494DA; /* Darker shade on hover */
        border-color:#5494DA;
        }
        </style>
</head>

<body>
   
   
    <div class="container" id="form-container">
        <h2 class="mb-4">Cetas Walk-In Registration Form</h2>
        <form id="registrationForm" >
            
            <div class="form-group mb-3">
                <div>
                <label for="fullname" class="form-label">Candidate Name</label>
                </div>
               <div>
                <input type="text" class="form-control" name="fullname" id="fullname" required onchange="validateFullname(this)">
            </div></div>
            <div id="fullname-error" class="text-danger"></div>
            
            <div class="form-group mb-3">
                    <div>
                    <label for="Candidate Email" class="form-label">Candidate Email</label>
                    </div>
                    <div>
                
                <input type="email" class="form-control" name="email" id="email"  required onchange="validateEmail(this)">
            </div></div>
            <div id="email-error" class="text-danger"></div>
            <div class="form-group mb-3">
                <div>
                    <label for="Candidate ContactNo" class="form-label">Candidate Contact No</label>
                    </div>
               <div>
                <input type="text" class="form-control" name="phone" id="phone"  required onchange="validatePhone(this)">
            </div>
            <div id="phone-error" class="text-danger"></div></div>
            <div class="form-group mb-3">
                <div>
                    <label for="Date of Birth" class="form-label">Date of Birth</label>
                    </div>
                    <div>
                <input type="date" class="form-control" name="dob" id="dob" placeholder="DOB" required>
                </div>
            </div>
            <div class="form-group mb-3"> 
                <div>
                    <label for="Gender" class="form-label">Gender</label>
                    </div>
                <select class="form-control" name="Gender" id="Gender" required>
                    <option value="" disabled selected>Select</option>
                    <option value="Male">Male</option>
                    <option value="Female">Female</option>
                </select>   
            </div>
            <div class="form-group mb-3"> 
                <div>
                    <label for="Marital Status" class="form-label">Marital Status</label>
                    </div>
                    <div>
                <select class="form-control" name="MaritalStatus" id="MaritalStatus" required>
                    <option value="" disabled selected>Select</option>
                    <option value="Single">Single</option>
                    <option value="Married">Married</option>
                </select>
                </div>
            </div>
            <div class="form-group mb-3">  
                <div>
                    <label for="College Name" class="form-label">College Name</label>
                    </div>
                    <div>
                    <input
                    type="text" class="form-control" name="college" id="college"  required>
            </div></div>
            <div class="form-group mb-3">
                <div>
                    <label for="Education Qualification" class="form-label">Education Qualification</label>
                </div>

                <select class="form-control" name="education" id="education" required>
                    <option value="" disabled selected>Select</option>
                    <option value="B.E Computer Science and Engineering">B.E Computer Science and Engineering</option>
                    <option value="M.Sc Computer Science">M.Sc Computer Science</option>
                    <option value="MCA">MCA</option>
                    <option value="B.Tech Information Technology">B.Tech Information Technology</option>
                    <option value="Other">Other</option>
                </select>
            </div>
            <div class="form-group mb-3" id="specialization-container" style="display: none;">
                <div>
                    <label for="Specialization" class="form-label">If other, mention your qualification</label>
                </div>
                <input type="text" class="form-control" name="Specialization" id="Specialization">
            </div>
               
           
            <div class="form-group mb-3">
                <div>
                    <label for="Year of Passing" class="form-label">Year of Passing</label>
                </div>

                <select class="form-control" name="YOP" id="YOP" required>
                    <option value="" disabled selected>Select</option>
                    <option value="2025">2025</option>
                    <option value="2024">2024</option>
                    <option value="2023">2023</option>

                </select>
            </div>
            <div class="form-group mb-3"> 
                <div>
                    <label for="Are you Fresher or Experienced" class="form-label">Are you Fresher or Experienced</label>
                </div>
                <div>
                <select class="form-control"
                    name="FresherOrExperience" id="FresherOrExperience" required>
                    <option value="" disabled selected>Select</option>
                    <option value="Fresher">Fresher</option>
                    <option value="Experience">Experienced</option>
                </select> </div></div>



                <div class="form-group mb-3 same-domain-field" style="display: none;">
                    
                    <select class="form-control" name="SameDomainExperience" id="SameDomainExperience">
                        <option value="" disabled selected>Experienced in Same Domain?</option>
                        <option value="Yes">Yes</option>
                        <option value="No">No</option>
                    </select>
                </div>

                <div class="form-group mb-3 exclude-for-freshers" style="display: none;">
                    <textarea
                        class="form-control"
                        name="WorkExperienceDetails"
                        id="WorkExperienceDetails"
                        placeholder="Mention your work experience in detail"
                        rows="3"
                    ></textarea>
                </div>
                <div class="form-group mb-3 exclude-for-freshers" style="display: none;">
                    <select class="form-control" name="OtherOfferInHand" id="OtherOfferInHand">
                        <option value="" disabled selected>Do you have any other offer in hand?</option>
                        <option value="Yes">Yes</option>
                        <option value="No">No</option>
                    </select>
                </div>
                <div class="form-group mb-3 offer-details-field" style="display: none;">
                    <textarea
                        class="form-control"
                        name="CompanyOfferDetails"
                        id="CompanyOfferDetails"
                        placeholder="Mention company and offer details"
                        rows="3"
                    ></textarea>
                </div>


                <div class="form-group mb-3 only-for-freshers" style="display: none;">
                    

                    <label for="JoinImmediately" class="form-label">If Fresher, would you like to join immediately?</label>

                    <select class="form-control mb-3" name="JoinImmediately" id="JoinImmediately">
                        <option value="" disabled selected>If Fresher, would you like to join Immediately</option>
                        <option value="Yes">Yes</option>
                        <option value="No">No</option>
                    </select>
                    
                </div>
                <div class="form-group mb-3 reason-for-not-joining" style="display: none;">
                   
                    <select class="form-control" name="ReasonNotJoining" id="ReasonNotJoining" >
                        <option value="" disabled selected>Select a reason</option>
                        <option value="Personal Reasons or family commitments">Personal Reasons or family commitments</option>
                        <option value="Academic Commitments">Academic Commitments(for freshers)</option>
                        <option value="Relocation Requirements">Relocation Requirements</option>
                        <option value="Waiting for final semester results">Waiting for final semester results</option>
                        <option value="Pending offer negotations">Pending offer negotations</option>
                        <option value="Serving notice period at current organization">Serving notice period at current organization</option>
                        <option value="For any other, Contact HR to discuss">For any other, Contact HR to discuss</option>
                    </select>
                </div>
                <div class="form-group mb-3 notice-period-fields" style="display: none;">
                    <input
                        type="text"
                        class="form-control"
                        name="NoticePeriodDuration"
                        id="NoticePeriodDuration"
                        placeholder="What is your notice period?"
                    >
                </div>
                <div class="form-group mb-3 notice-period-fields" style="display: none;">
                    <div>
                        <label for="Last Working Date" class="form-label">Last Working Date</label>
                    </div>
                    <input
                        type="date"
                        class="form-control"
                        name="LastWorkingDate"
                        id="LastWorkingDate"
                        placeholder="When is your last working date?"
                    >
                </div>
            <div class="form-group mb-3 exclude-for-freshers" >  <input type="number" class="form-control"
                    name="TotalExperience" id="TotalExperience" placeholder="Over all Experience" min="0" max="50"
                    step="0.1"  onchange="validateTotalExperience(this)">
                    <div id="total-experience-error" class="text-danger"></div>

                 </div>
            <div class="form-group mb-3 exclude-for-freshers">  <input type="number" class="form-control"
                    name="RelevantExperience" id="RelevantExperience" placeholder="Relevant Experience" min="0" max="50"
                    step="0.1" onchange="validateRelevantExperience(this)"> 
                    <div id="relevant-experience-error" class="text-danger"></div>

                
                </div>
            <div class="form-group mb-3 exclude-for-freshers"> <input type="number" class="form-control"
                    name="DomainExperience" id="DomainExperience" placeholder="Other Domain Experience" min="0" max="50"
                    step="0.1" onchange="validateDomainExperience(this)">
                    <div id="domain-experience-error" class="text-danger"></div>

                 </div>
           
            <div class="form-group mb-3 exclude-for-freshers"> <input type="number" class="form-control" name="CurrentCTC"
                    id="CurrentCTC" placeholder="Current CTC in Lakhs" min="0" step="0.1" max="100" onchange="validateCurrentCTC(this)"> 
                    <div id="currentctc-error" class="text-danger"></div>
                </div>
            <div class="form-group mb-3 exclude-for-freshers"> <input
                    type="number" class="form-control" name="ExpectedCTC" id="ExpectedCTC"
                    placeholder="Expected CTC in Lakhs" min="0" step="0.1" max="100" onchange="validateExpectedCTC(this)">
                    <div id="expectedctc-error" class="text-danger"></div>

                 </div>
            <div class="form-group mb-3 exclude-for-freshers"><select class="form-control"
                    name="JoinerOrNotice" id="JoinerOrNotice">
                    <option value="" disabled selected>Immediate Joiner or Notice Period </option>
                    <option value="Immediate Joiner">Immediate Joiner</option>
                    <option value="Notice Period">Notice Period</option>
                </select> </div>
            <div class="form-group mb-3 exclude-for-freshers">  <input type="text" class="form-control"
                    name="NoOfDaysNotice" id="NoOfDaysNotice" placeholder="Notice Period No of days/No of months">
            </div>
            <div class="form-group mb-3 exclude-for-freshers">
                <div>
                    <label for="Last Serving Date" class="form-label">Last Serving Date</label>
                </div>
                 <input
                    type="date" class="form-control" name="ServingDate" id="ServingDate"
                    placeholder="Notice Period Serving Last Date"> </div>
                    <div class="form-group mb-3 "> 
                        <div>
                            <label for="Expertise Functional or Technical" class="form-label">Expertise Functional or Technical</label>
                        </div>
                        <div>
                        <select class="form-control"
                            name="FunctionalOrTechnical" id="FunctionalOrTechnical" required>
                            <option value="" disabled selected>Select</option>
                            <option value="Functional">Functional</option>
                            <option value="Technical">Technical</option>
                            <option value="Techno-Functional">Techno-Functional</option>
                        </select> </div></div>
            <div class="form-group mb-3">
                <div>
                    <label for="How did you know us?" class="form-label">How did you know us?</label>
                </div> 
                <select class="form-control" name="KnownCetas"
                    id="KnownCetas" required>
                    <option value="" disabled selected>Select</option>
                    <option value="Cetas Website">Cetas Website</option>
                    <option value="LinkedIn">LinkedIn </option>
                    <option value="Friends">Friends</option>
                    <option value="Employee of Cetas">Refer by Cetas Employee</option>
                    <option value="Consultancy or Institute">Consultancy/Institute</option>
                    <option value="Walk-in">Walk-in</option>
                </select> </div>
            <div class="form-group mb-3">
                <div>
                    <label for="Enter your SSCL Certificate No" class="form-label">Enter your SSLC Certificate No</label>
                </div>
                
                <input
                    type="text" class="form-control" name="CertificateNo" id="CertificateNo"
                     required onchange="validateCertificate(this)">
                     <div id="certificate-error" class="text-danger"></div>
                    </div>
            <div class="form-group mb-3">
                <div>
                    <label for="Approximate date to join in cetas" class="form-label">Approximate date to join in cetas</label>
                </div>
                        <input type="date" class="form-control" name="ApproxDate" id="ApproxDate" placeholder="Approximate date to join in cetas " required>
                    </div>        
            <div class="form-group mb-3">
                <div>
                    <label for="Upload your resume" class="form-label">Upload your resume</label>
                </div> 
                <input
                    type="file" class="form-control" name="resume" id="resume" accept=".pdf,.doc,.docx" required onchange="validateResume(this)"> 
                    <div id="resume-error" class="text-danger"></div>
                </div> 

                    <button type="submit" class="btn btn-primary w-100" name="submitBtn" id="submitBtn">Submit</button>        </form>
        <div id="alert-container" class="mt-3"></div>
    </div>
    <script >

const sendFormDataApi = 'https://prod-12.centralindia.logic.azure.com:443/workflows/bc2a849b68a04584bda8fe6ec3f57689/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=2GJanjyDWT9qoxVRxe4YdGPPGdLizr70vin52AHt9zI'
const validateApi = 'https://prod-15.centralindia.logic.azure.com:443/workflows/e830e8948f0045e1bbb71a4b0ce0e446/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=VkahY2elK2rpN2ZKjeaX-YigT8hijWfJH5zU_tIB8YM'
 
function validateFullname(input) {
    const fullname = input.value.trim();
    const fullnameError = document.getElementById("fullname-error");

    fullnameError.innerText = "";

    if (!/^[A-Za-z\s]{2,50}$/.test(fullname)) {
        fullnameError.innerText = "Full name must be  contain only letters and spaces.";
        input.classList.add("is-invalid");
        input.classList.remove("is-valid");
    } else {
        fullnameError.innerText = ""; 
        input.classList.remove("is-invalid");
        input.classList.add("is-valid");
    }
}

function validatePhone(input) {
    const phone = input.value.trim();
    const phoneError = document.getElementById("phone-error");

    phoneError.innerText = "";

    if (!/^[6-9]\d{9}$/.test(phone)) {
        phoneError.innerText = "Phone number must start with 6-9 and be exactly 10 digits.";
        input.classList.add("is-invalid");
        input.classList.remove("is-valid");
    } else {
        phoneError.innerText = ""; 
        input.classList.remove("is-invalid");
        input.classList.add("is-valid");
    }
}

async function validateEmail(input) {
    const email = input.value.trim();
    const emailError = document.getElementById("email-error");

    emailError.innerText = "";

    if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
        emailError.innerText = "Please enter a valid email address.";
        input.classList.add("is-invalid");
        input.classList.remove("is-valid");
        return;
    }

   
    const emailExists = await validateEmailAndCertificate(email, null);
    if (emailExists) {
        emailError.innerText = "This email has already been registered.";
        input.classList.add("is-invalid");
        input.classList.remove("is-valid");
    } else {
        emailError.innerText = "";
        input.classList.remove("is-invalid");
        input.classList.add("is-valid");
    }
}
async function validateCertificate(input) {
    const certificateNo = input.value.trim();
    const certificateError = document.getElementById("certificate-error");

    certificateError.innerText = "";

    if (!/^[A-Za-z0-9]{1,11}$/.test(certificateNo)) {
        certificateError.innerText = "Certificate number must be up to 11 characters long and contain only numbers and optional alphabets.";
        input.classList.add("is-invalid");
        return;
    }

    const certificateExists = await validateEmailAndCertificate(null, certificateNo);
    if (certificateExists) {
        certificateError.innerText = "This certificate number has already been registered.";
        input.classList.add("is-invalid");
        input.classList.remove("is-valid");

    } else {
        certificateError.innerText = ""; 
        input.classList.remove("is-invalid");
        input.classList.add("is-valid");
    }
}
function validateResume(input) {
    const file = input.files[0];
    const allowedExtensions = /\.(pdf|doc|docx)$/i;
    const resumeError = document.getElementById("resume-error");

    if (!allowedExtensions.test(file.name)) {        
        resumeError.innerText = "Resume must be in PDF or Word format.";
        input.classList.add("is-invalid");
        input.classList.remove("is-valid");
        return;
    }

    if (file.size > 2 * 1024 * 1024) {
        resumeError.innerText = "Resume size must be less than 2MB.";   
        input.classList.add("is-invalid");
        input.classList.remove("is-valid");
        return;
    }

    input.classList.remove("is-invalid");
    input.classList.add("is-valid");
}
function validateTotalExperience(input) {
    const value = parseFloat(input.value.trim());
    const errorContainer = document.getElementById("total-experience-error");

    errorContainer.innerText = "";

    if (isNaN(value) || value < 0 || value > 50) {
        errorContainer.innerText = "Total Experience must be between 0 and 50 years.";
        input.classList.add("is-invalid");
        input.classList.remove("is-valid");
    } else {
        errorContainer.innerText = ""; 
        input.classList.remove("is-invalid");
        input.classList.add("is-valid");
    }
}
function validateRelevantExperience(input) {
    const totalExperience = parseFloat(document.getElementById("TotalExperience").value.trim()) || 0;
    const value = parseFloat(input.value.trim());
    const errorContainer = document.getElementById("relevant-experience-error");

    if (isNaN(value) || value < 0 || value > totalExperience) {
        errorContainer.innerText="Relevant Experience must be between 0 and Total Experience.", "danger";
        input.classList.add("is-invalid");
        input.classList.remove("is-valid");
    } else {
        errorContainer.innerText = "";
        input.classList.remove("is-invalid");
        input.classList.add("is-valid");
    }
}
function validateDomainExperience(input) {
    const totalExperience = parseFloat(document.getElementById("TotalExperience").value.trim()) || 0;
    const relevantExperience = parseFloat(document.getElementById("RelevantExperience").value.trim()) || 0;
    const maxDomainExperience = totalExperience - relevantExperience;
    const value = parseFloat(input.value.trim());
    const errorContainer = document.getElementById("domain-experience-error");

    errorContainer.innerText = "";

    if (isNaN(value) || value < 0 || value > maxDomainExperience) {
        errorContainer.innerText = `Domain Experience must be between 0 and ${maxDomainExperience} years.`;
        input.classList.add("is-invalid");
        input.classList.remove("is-valid");
    } else {
        errorContainer.innerText = ""; 
        input.classList.remove("is-invalid");
        input.classList.add("is-valid");
    }
}
function validateCurrentCTC(input) {
    const value = parseFloat(input.value.trim());
    const errorContainer = document.getElementById("currentctc-error");

    // Clear any previous error message
    errorContainer.innerText = "";

    if (isNaN(value) || value < 0 || value > 100) {
        errorContainer.innerText = "Current CTC must be between 0 and 100 Lakhs.";
        input.classList.add("is-invalid");
        input.classList.remove("is-valid");
    } else {
        errorContainer.innerText = ""; // Clear the error if valid
        input.classList.remove("is-invalid");
        input.classList.add("is-valid");
    }
}
function validateExpectedCTC(input) {
    const value = parseFloat(input.value.trim());
    const errorContainer = document.getElementById("expectedctc-error");

    // Clear any previous error message
    errorContainer.innerText = "";

    if (isNaN(value) || value < 0 || value > 100) {
        errorContainer.innerText = "Expected CTC must be between 0 and 100 Lakhs.";
        input.classList.add("is-invalid");
        input.classList.remove("is-valid");
    } else {
        errorContainer.innerText = ""; // Clear the error if valid
        input.classList.remove("is-invalid");
        input.classList.add("is-valid");
    }
}
document.addEventListener("DOMContentLoaded", () => {
    initForm();
    const today = new Date();

const eighteenYearsAgo = new Date(today.setFullYear(today.getFullYear() - 18));

const maxDate = eighteenYearsAgo.toISOString().split("T")[0];

const dobField = document.getElementById("dob");
dobField.setAttribute("max", maxDate);
const educationField = document.getElementById("education");
const specializationContainer = document.getElementById("specialization-container");

    educationField.addEventListener("change", () => {
                if (educationField.value === "Other") {
                    specializationContainer.style.display = "block"; 
                } else {
                    specializationContainer.style.display = "none"; 
                }
            });
});

function initForm() {
    const form = document.getElementById("registrationForm");

    setupExperienceFieldToggle();
    animateForm();
    form.addEventListener("submit", handleFormSubmit);
}


function setupExperienceFieldToggle() {
    const expTypeSelect = document.getElementById("FresherOrExperience");
    const joinImmediatelySelect = document.getElementById("JoinImmediately");
    const reasonNotJoiningSelect = document.getElementById("ReasonNotJoining");
    const reasonForNotJoiningField = document.querySelector(".reason-for-not-joining");
    const noticePeriodFields = document.querySelectorAll(".notice-period-fields");
    const sameDomainSelect = document.getElementById("SameDomainExperience");
    const excludedFields = document.querySelectorAll(".exclude-for-freshers");
    const sameDomainField = document.querySelector(".same-domain-field");
    const workExperienceField = document.getElementById("WorkExperienceDetails").parentElement;
    const otherOfferField = document.getElementById("OtherOfferInHand").parentElement;
    const offerDetailsField = document.getElementById("CompanyOfferDetails").parentElement;
    const offerInHandSelect = document.getElementById("OtherOfferInHand");
    const joinerOrNoticeSelect = document.getElementById("JoinerOrNotice");

   
    
    const domainExperienceField = document.getElementById("DomainExperience").parentElement;
    const relevantExperienceField = document.getElementById("RelevantExperience").parentElement;
    const totalExperienceField = document.getElementById("TotalExperience").parentElement;
    const currentCTCField = document.getElementById("CurrentCTC").parentElement;
    const expectedCTCField = document.getElementById("ExpectedCTC").parentElement;
    const offerInHandField = document.getElementById("OtherOfferInHand").parentElement;
    const noOfDaysNoticeField = document.getElementById("NoOfDaysNotice").parentElement;
    const joinerOrNoticeField = document.getElementById("JoinerOrNotice").parentElement;
    const servingDateField = document.getElementById("ServingDate").parentElement;
    const workExperienceDetailsField = document.getElementById("WorkExperienceDetails").parentElement;



    function toggleFields() {
        const isExperienced = expTypeSelect.value === "Experience";
        const isFresher = expTypeSelect.value === "Fresher";
        const fresherFields = document.querySelectorAll(".only-for-freshers");

        sameDomainField.style.display = isExperienced ? "flex" : "none";
        noOfDaysNoticeField.style.display = "none";
        servingDateField.style.display = "none";

        const excludedFields = document.querySelectorAll(".exclude-for-freshers");
        excludedFields.forEach(el => {
            el.style.display = "none";
            const input = el.querySelector("input, select");
            if (input) input.value = ""; 
           
        });
        const allFields = [
            domainExperienceField,
            relevantExperienceField,
            totalExperienceField,
            currentCTCField,
            expectedCTCField,
            offerInHandField,
            noOfDaysNoticeField,
            joinerOrNoticeField,
            servingDateField,
            workExperienceDetailsField,
        ];
        allFields.forEach(field => {
            field.style.display = "none";
            const input = field.querySelector("input, select, textarea");
            if (input) input.value = ""; 
        });
        if (sameDomainSelect) {
            sameDomainSelect.addEventListener("change", () => {
                const isSameDomainYes = sameDomainSelect.value === "Yes";
                const isSameDomainNo = sameDomainSelect.value === "No";

                if (isSameDomainYes) {
                    domainExperienceField.style.display = "flex";
                    relevantExperienceField.style.display = "flex";
                    totalExperienceField.style.display = "flex";
                    currentCTCField.style.display = "flex";
                    expectedCTCField.style.display = "flex";
                    offerInHandField.style.display = "flex";
                    noOfDaysNoticeField.style.display = "flex";
                    joinerOrNoticeField.style.display = "flex";
                    servingDateField.style.display = "flex";
                }
                else if (isSameDomainNo) {
                    workExperienceDetailsField.style.display = "flex";
                    relevantExperienceField.style.display = "none";
                    currentCTCField.style.display = "flex";
                    expectedCTCField.style.display = "flex";
                    offerInHandField.style.display = "flex";
                    joinerOrNoticeField.style.display = "flex";
                    domainExperienceField.style.display = "flex";
                    totalExperienceField.style.display = "flex";
                    noOfDaysNoticeField.style.display = "flex";
                    servingDateField.style.display = "flex";
                }
            });
        }
    excludedFields.forEach(el => {
        el.style.display = isExperienced ? "flex" : "none";
        const input = el.querySelector("input, select, textarea");
        if (!isExperienced && input) input.value = ""; 
    });

    
    fresherFields.forEach(el => {
        el.style.display = isFresher ? "flex" : "none";
        const input = el.querySelector("input, select, textarea");
        if (input) {
            if (isFresher) {
                input.setAttribute("required", "required");
            } else {
                input.removeAttribute("required");
                input.value = ""; 
            }
        }
    });

            if (joinerOrNoticeSelect) {
            joinerOrNoticeSelect.addEventListener("change", () => {
                const showNoticeFields = joinerOrNoticeSelect.value === "Notice Period";
                noOfDaysNoticeField.style.display = showNoticeFields ? "flex" : "none";
                servingDateField.style.display = showNoticeFields ? "flex" : "none";

                if (!showNoticeFields) {
                    const noOfDaysInput = noOfDaysNoticeField.querySelector("input");
                    const servingDateInput = servingDateField.querySelector("input");
                    if (noOfDaysInput) noOfDaysInput.value = "";
                    if (servingDateInput) servingDateInput.value = "";
                }
            });
        }

          if (isExperienced) {
            reasonForNotJoiningField.style.display = "none";
            reasonNotJoiningSelect.value = ""; 
            reasonNotJoiningSelect.removeAttribute("required");

            noticePeriodFields.forEach(field => {
                field.style.display = "none";
                const input = field.querySelector("input");
                if (input) input.value = ""; 
            });
        }

        if (joinImmediatelySelect) {
        joinImmediatelySelect.addEventListener("change", () => {
            const showReasonField = joinImmediatelySelect.value === "No";
            reasonForNotJoiningField.style.display = showReasonField ? "flex" : "none";

            if (reasonNotJoiningSelect) {
                if (showReasonField) {
                    reasonNotJoiningSelect.setAttribute("required", "required");
                } else {
                    reasonNotJoiningSelect.removeAttribute("required");
                    reasonNotJoiningSelect.value = ""; 
                }
            }
        });
    }
        if (reasonNotJoiningSelect) {
            reasonNotJoiningSelect.addEventListener("change", () => {
                const showNoticeFields = reasonNotJoiningSelect.value === "Serving notice period at current organization";
                noticePeriodFields.forEach(field => {
                    field.style.display = showNoticeFields ? "flex" : "none";
                    if (!showNoticeFields) {
                        const input = field.querySelector("input");
                        if (input) input.value = "";
                    }
                });
            });
        }
        if (offerInHandSelect) {
            offerInHandSelect.addEventListener("change", () => {
                const showOfferDetails = offerInHandSelect.value === "Yes";
                offerDetailsField.style.display = showOfferDetails ? "flex" : "none";
                if (!showOfferDetails) {
                    const input = offerDetailsField.querySelector("textarea");
                    if (input) input.value = ""; 
                }
            });
        }
   
    fresherFields.forEach(el => {
        el.style.display = isFresher ? "flex" : "none";
        const input = el.querySelector("input, select, textarea");
        if (!isFresher && input) input.value = ""; 
    });
    }

    if (expTypeSelect) {
        expTypeSelect.addEventListener("change", toggleFields);
        toggleFields();
    }
}
function animateForm() {
    gsap.from("#form-container", {
        duration: 1,
        opacity: 0,
        y: -50,
        ease: "power2.out"
    });
}

async function handleFormSubmit(event) {
    event.preventDefault();
    console.log("Form submission started");

    const form = event.target;
    const phone = form.phone.value.trim();
    const dob = form.dob.value;
    const resumeFile = form.resume.files[0];
    const formData = collectFormData(form);
    const UniqueID=formData.UniqueID;


    const certificateNo = form.CertificateNo.value.trim();
    const email = form.email.value.trim();
    const fullname = form.fullname.value.trim();
    const approxDate = form.ApproxDate.value;

    const fresherOrExperience = form.FresherOrExperience.value;
    
    const errorMessages = [];




    if (fresherOrExperience === "Experience") {
        const totalExperience = parseFloat(form.TotalExperience.value) || 0;
        const relevantExperience = parseFloat(form.RelevantExperience.value) || 0;
        const domainExperience = parseFloat(form.DomainExperience.value) || 0;
        const currentCTC = parseFloat(form.CurrentCTC.value) || 0;
        const expectedCTC = parseFloat(form.ExpectedCTC.value) || 0;

        if (isNaN(totalExperience) || totalExperience < 0 || totalExperience > 50) {
        errorMessages.push("Total Experience must be between 0 and 50 years.");
    }

    if (isNaN(relevantExperience) || relevantExperience < 0 || relevantExperience > totalExperience) {
        errorMessages.push("Relevant Experience must be between 0 and Total Experience.");
    }

    const maxDomainExperience = totalExperience - relevantExperience;
    if (isNaN(domainExperience) || domainExperience < 0 || domainExperience > maxDomainExperience) {
    errorMessages.push(`Domain Experience must be between 0 and ${maxDomainExperience} years.`);
    }

        if (!form.FunctionalOrTechnical.value) {
            errorMessages.push("Please select Functional or Technical expertise.");
        }
    if (isNaN(currentCTC) || currentCTC < 0 || currentCTC > 100) {
        errorMessages.push("Current CTC must be between 0 and 100 Lakhs.");
    }

    if (isNaN(expectedCTC) || expectedCTC < 0 || expectedCTC > 100) {
        errorMessages.push("Expected CTC must be between 0 and 100 Lakhs.");
    }
           

        if (!form.JoinerOrNotice.value) {
            errorMessages.push("Please select Immediate Joiner or Notice Period.");
        }

        if (form.JoinerOrNotice.value === "Notice Period") {
        if (!form.NoOfDaysNotice.value) {
        errorMessages.push("Please provide the Notice Period duration.");
        }
        if (!form.ServingDate.value) {
        errorMessages.push("Please provide the Notice Period Serving Last Date.");
        }
    }
   

   }

    if (errorMessages.length) {
        showAlert(errorMessages.join("<br>"), "danger");
        return;
    }

    const emailExists = await validateEmailAndCertificate(email, null);
    if (emailExists) {
        document.getElementById("email-error").innerText = "This email has already been registered.";
        document.getElementById("email").classList.add("is-invalid");
        return;
    }

    const certificateExists = await validateEmailAndCertificate(null, certificateNo);
    if (certificateExists) {
        document.getElementById("certificate-error").innerText = "This certificate number has already been registered.";
        document.getElementById("CertificateNo").classList.add("is-invalid");
        return;
    }

    if (resumeFile) {
        try {
            formData.resume = await toBase64(resumeFile);
            formData.filename = resumeFile.name;
        } catch (error) {
            console.error("File conversion error:", error);
            return showAlert("Failed to process resume file.", "danger");
        }
    }

    console.log("Form data:", formData);
    console.log("Sending data to API...");
    await sendFormData(formData, form);
}

function isAtLeast18YearsOld(dobStr) {
    if (!dobStr) {
        return false; 
    }

    const dob = new Date(dobStr);
    if (isNaN(dob.getTime())) {
        return false; 
    }

    const today = new Date();
    const minDate = new Date(today.setFullYear(today.getFullYear() - 18));
    return dob <= minDate; 
 }
    function generateGUID() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            const r = (Math.random() * 16) | 0;
            const v = c === 'x' ? r : (r & 0x3) | 0x8;
            return v.toString(16);
        });
    }


function collectFormData(form) {
    const currentDate = new Date().toISOString().split("T")[0]; 

    return {
        fullname: form.fullname.value.trim(),
        email: form.email.value.trim(),
        phone: form.phone.value.trim(),
        dob: form.dob.value,
        college: form.college.value.trim(),
        education: form.education.value,
        Specialization: form.Specialization.value.trim(),
        resume: null,
        filename: "",
        FresherOrExperience: form.FresherOrExperience.value,
        JoinImmediately: form.FresherOrExperience.value === "Fresher" ? form.JoinImmediately.value || null : null,
        ReasonNotJoining: form.JoinImmediately && form.JoinImmediately.value === "No" ? form.ReasonNotJoining.value || null : null,
        NoticePeriodDuration: form.ReasonNotJoining && form.ReasonNotJoining.value === "Serving notice period at current organization" ? form.NoticePeriodDuration.value || null : null,
        LastWorkingDate: form.ReasonNotJoining && form.ReasonNotJoining.value === "Serving notice period at current organization" ? form.LastWorkingDate.value || null : null,
        SameDomainExperience: form.FresherOrExperience.value === "Experience" ? form.SameDomainExperience.value || null : null,
        WorkExperienceDetails: form.FresherOrExperience.value === "Experience" && form.SameDomainExperience.value === "No" ? form.WorkExperienceDetails.value.trim() || null : null,
        OtherOfferInHand: form.FresherOrExperience.value === "Experience" && form.SameDomainExperience.value ? form.OtherOfferInHand.value || null : null,
        CompanyOfferDetails: form.OtherOfferInHand && form.OtherOfferInHand.value === "Yes" ? form.CompanyOfferDetails.value.trim() || null : null,
        TotalExperience: form.FresherOrExperience.value === "Experience" ? parseFloat(form.TotalExperience.value) || null : null,
        RelevantExperience: form.FresherOrExperience.value === "Experience" && form.SameDomainExperience.value === "Yes" ? parseFloat(form.RelevantExperience.value) || null : null,
        DomainExperience: form.FresherOrExperience.value === "Experience" && form.SameDomainExperience.value === "Yes" ? parseFloat(form.DomainExperience.value) || null : null,
        FunctionalOrTechnical: form.FunctionalOrTechnical.value,
        CurrentCTC: form.FresherOrExperience.value === "Experience" ? parseFloat(form.CurrentCTC.value) || null : null,
        ExpectedCTC: form.FresherOrExperience.value === "Experience" ? parseFloat(form.ExpectedCTC.value) || null : null,
        JoinerOrNotice: form.FresherOrExperience.value === "Experience" ? form.JoinerOrNotice.value || null : null,
        NoOfDaysNotice: form.FresherOrExperience.value === "Experience" ? form.NoOfDaysNotice.value || null : null,
        ServingDate: form.FresherOrExperience.value === "Experience" ? form.ServingDate.value || null : null,
        KnownCetas: form.KnownCetas.value,
        CertificateNo: form.CertificateNo.value.trim(),
        Gender: form.Gender.value,
        MaritalStatus: form.MaritalStatus.value,
        YOP: form.YOP.value,
        ApproxDate: form.ApproxDate.value,
        UniqueID:generateGUID(),
        SubmissionDate:currentDate  
    };
}
    
function showAlert(message, type) {
    let alertBox = document.getElementById("alert-box");
    if (!alertBox) {
        alertBox = document.createElement("div");
        alertBox.id = "alert-box";
        alertBox.style.marginTop = "15px";
        document.getElementById("submitBtn").parentNode.appendChild(alertBox);
    }

    alertBox.innerHTML = `
        <div class="alert alert-${type} alert-dismissible fade show" role="alert">
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    `;
    gsap.from(".alert", { duration: 0.5, opacity: 0, y: -10 });

    setTimeout(() => {
        const alertElement = document.querySelector(".alert");
        if (alertElement) {
            gsap.to(alertElement, {
                duration: 0.3,
                opacity: 0,
                y: -10,
                onComplete: () => {
                    alertBox.innerHTML = ""; 
                }
            });
        }
    }, 5000); 
}

function toBase64(file) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = () => resolve(reader.result.split(",")[1]);
        reader.onerror = reject;
        reader.readAsDataURL(file);
    });
}

async function validateEmailAndCertificate(email, certificateNo) {
        try {
            const payload = {};
            if (email) payload.email = email;
            if (certificateNo) payload.certificateNo = certificateNo;

            const response = await fetch(validateApi, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });

            if (response.ok) {
                const data = await response.json();
                return data.recordExists || false;
            } else {
                const errorText = await response.text();
                console.error("Validation API failed:", errorText);
                showAlert("Failed to validate. Please try again later.", "danger");
                return false;
            }
        } catch (error) {
            console.error("Network error during validation:", error);
            showAlert("Network error while validating. Please try again later.", "danger");
            return false;
        }
    }

    async function sendFormData(data, form) {
    try {
        console.log("Form Data Sent to API:", data);
        const response = await fetch(sendFormDataApi, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
        });
        console.log("API Response:", response);
        if (response.ok) {
            const successPageHTML = `
                <html>
                  <head>
                    <link href="https://fonts.googleapis.com/css?family=Nunito+Sans:400,400i,700,900&display=swap" rel="stylesheet">
                  </head>
                  <style>
                    body {
                      text-align: center;
                      padding: 40px 0;
                      background: #EBF0F5;
                    }
                    h1 {
                      color: #88B04B;
                      font-family: "Nunito Sans", "Helvetica Neue", sans-serif;
                      font-weight: 900;
                      font-size: 40px;
                      margin-bottom: 10px;
                    }
                    p {
                      color: #404F5E;
                      font-family: "Nunito Sans", "Helvetica Neue", sans-serif;
                      font-size: 20px;
                      margin: 0;
                    }
                    i {
                      color: #9ABC66;
                      font-size: 100px;
                      line-height: 200px;
                      margin-left: -15px;
                    }
                    .card {
                      background: white;
                      padding: 60px;
                      border-radius: 4px;
                      box-shadow: 0 2px 3px #C8D0D8;
                      display: inline-block;
                      margin: 0 auto;
                    }
                  </style>
                  <body>
                    <div class="card">
                      <div style="border-radius:200px; height:200px; width:200px; background: #F8FAF5; margin:0 auto;">
                        <i class="checkmark">✓</i>
                      </div>
                      <h1>Success</h1>
                      <p>Your submission has been received;<br/> we'll be in touch shortly!</p>
                    </div>
                  </body>
                </html>
            `;

            document.open();
            document.write(successPageHTML);
            document.close();

            form.reset(); 
        } else {
            const errorText = await response.text();
            console.error("Form submission failed:", errorText);
            showAlert(`Failed to submit the form: ${errorText}`, "danger");
        }
    } catch (error) {
        console.error("Network error during form submission:", error);
        showAlert("Network error while submitting the form. Please try again later.", "danger");
    }
}


    </script>
</body>

</html>
